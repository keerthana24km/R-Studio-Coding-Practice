simulatedData = replicate(nsimulations, route())
s = c('East','North')
p = c(replicate(10, c(1/10)),replicate(7, c(1/7)))
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
for(i in c(1:16)){
sample(s, 1, replace=TRUE, prob=p)
}
return(1)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
s = c('East','North')
p = c(replicate(10, c(1/10)),replicate(7, c(1/7)))
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
for(i in c(1:16)){
sample(s, 1, replace=TRUE, prob=p/17)
}
return(1)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
s = c('East','North')
p = c(replicate(10, c(1/10)),replicate(7, c(1/7)))
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
for(i in c(1:16)){
sample(s, 1, replace=TRUE, prob=p)
}
return(1)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
s = c('East','North')
p = c(replicate(10, c(1/10)))
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
for(i in c(1:16)){
sample(s, 1, replace=TRUE, prob=p)
}
return(1)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
for(i in c(1:16)){
sample(s, 1, replace=TRUE, prob=p)
}
return(1)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
for(i in c(1:16)){
sample(s, 1, replace=TRUE, prob=p)
}
return(1)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
simulatedData
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 10
simulatedData = replicate(nsimulations, route())
simulatedData
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
mean(simulatedData)
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
simulatedData
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
simulatedData
checkEvent = function(data){
if(data %in% c('East')){
count1 = count1+1
}
if(data %in% c('North')){
count2 = count2+1
}
if(count1==10 & count2==6){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
if(any(data %in% c('East'))){
count1 = count1+1
}
if(any(data %in% c('North'))){
count2 = count2+1
}
if(count1==10 & count2==6){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
if(any(data %in% c('East'))){
count1 = count1+1
}
if(any(data %in% c('North'))){
count2 = count2+1
}
if(count1==10 & count2==6){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
if(any(data %in% c('East'))){
count1 = count1+1
}
if(any(data %in% c('North'))){
count2 = count2+1
}
if(count1==1 & count2==1){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1==10 & count2==6){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1==10 & count2==6){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=10 & count2<=6){
return(TRUE)
}
return(FALSE)
}
apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=10 & count2<=6){
return(TRUE)
}
}
apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
val = FALSE
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=10 & count2<=6){
val = TRUE
}
return(val)
}
apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
checkEvent = function(data){
count1 = count2 = 0
val = FALSE
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
print(count1)
print(count2)
if(count1<=10 & count2<=6){
val = TRUE
}
return(val)
}
#apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
#Probability that he reached the store
checkEvent = function(data){
count1 = count2 = 0
val = FALSE
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=10 & count2<=6){
val = TRUE
}
return(val)
}
#Probability that he visits the bank
checkEventBank = function(data){
count1 = count2 = 0
val = FALSE
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=6 & count2<=4){
val = TRUE
}
return(val)
}
#apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
mean(apply(simulatedData, 2, checkEventBank))
s = c('East','North')
p = c(1/10,1/7)
#Given any route, it takes 16 blocks for Joe to reach the store
route = function(){
result = numeric(16)
for(i in c(1:16)){
result[i] = sample(s, 1, replace=TRUE, prob=p)
}
return(result)
}
nsimulations = 1e4
simulatedData = replicate(nsimulations, route())
#simulatedData
#Probability that he reached the store
checkEvent = function(data){
count1 = count2 = 0
val = FALSE
for(i in c(1:16)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=10 & count2<=6){
val = TRUE
}
return(val)
}
#Probability that he visits the bank
checkEventBank = function(data){
count1 = count2 = 0
val = FALSE
for(i in c(1:10)){
if(any(data[i] %in% c('East'))){
count1 = count1+1
}
if(any(data[i] %in% c('North'))){
count2 = count2+1
}
}
if(count1<=6 & count2<=4){
val = TRUE
}
return(val)
}
#apply(simulatedData, 2, checkEvent)
mean(apply(simulatedData, 2, checkEvent))
mean(apply(simulatedData, 2, checkEventBank))
setwd("C:/Users/user/Desktop/MSIS_files/R studio workspace")
# Generate a 52-card deck
suits = c('H', 'D', 'S', 'C')
cards = c(2:10, 'J', 'Q', 'K', 'A')
s = paste0(rep(cards, length(suits)), rep(suits, each = length(cards)))
# Simulate dealing 5 cards to 8 hands (40 cards)
nsimulations = 1e5
simulatedData = replicate(nsimulations, sample(s, size = 40, prob = rep(1/length(s), length(s))))
# Check event given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand that all four of those cards are together in the same hand.
checkEvent6 = function(data){
return(unique(ceiling(which(grepl('A', data)) /5)) == unique(ceiling(which(grepl('Q', data)) /5)))
}
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
